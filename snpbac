#!/usr/bin/env python3

import sys
import os
import glob
import argparse
import subprocess
from mapping import ReadMapper
from call_variants import VariantCaller
from recombination import RecombinationFilter
from snp_matrix import CoresnpMatrix
from Bio import SeqIO


def run_pipeline(args):
	
	reads = []
	infile = open(args.input[0], "r")
	reads.extend([line.strip() for line in infile])

	output = args.output[0]
	if not output.endswith("/"):
		output = output.strip() + "/"

	#make_output_directory = ["mkdir", output+"snpbac_final_results/"]
	#make_output_directory_call = subprocess.Popen(make_output_directory)
	os.mkdir(output+"snpbac_final_results/")
	final_results_directory = output+"snpbac_final_results/"
	
	reference = args.reference[0]
	threads = args.threads
	aligner = args.aligner
	variant = args.variant_caller
	minq = args.quality
	recomb = args.remove_recombination	

	for r in reads:	
		seq = []

		if "," in r:
			forward, reverse = r.split(",")[0].strip(), r.split(",")[1].strip()
			prefix = forward.split(".fastq.gz")[0].split("/")[-1]
			seq.extend([forward, reverse])

		else:
			prefix = r.split(".fastq.gz")[0].split("/")[-1]
			seq.extend(r.strip())

		map_reads = ReadMapper(
			prefix = prefix.strip(),
			seq = seq,
			reference = reference,
			threads = threads,
			final_results_directory = final_results_directory)	
	
		carats = 0
		test_ref = open(reference, "r")
		for record in SeqIO.parse(test_ref, "fasta"):
			carats += 1
		test_ref.close()
		if carats > 1:
			reference = map_reads.concatenate_reference_contigs(reference, final_results_directory)

		if aligner == "bwa":
			map_command = map_reads.bwa_setup(reference, threads, seq, prefix)
	
		elif aligner == "bowtie2":
			map_command = map_reads.bowtie2_setup(reference, threads, seq, prefix)

		print(map_command)	
		map_reads.map_and_process(map_command, prefix, threads, final_results_directory)

	call_variants = VariantCaller(
		final_results_directory = final_results_directory,
		reference = reference, 
		threads = threads,
		minq = minq)
	
	bam_names = call_variants.gather_bamfiles(final_results_directory)
	print(bam_names)

	if variant == "samtools":
		call_variants.samtools_variant_caller(final_results_directory, reference, threads, bam_names)
	elif variant == "freebayes":
		call_variants.freebayes_variant_caller(final_results_directory, reference, threads, bam_names)	

	call_variants.filter_variants(final_results_directory, minq)
	call_variants.subset_vcf(final_results_directory)
	call_variants.vcf_consensus(final_results_directory, reference)
	call_variants.rename_concat_consensus(final_results_directory)	
	
	if recomb == "True":

		recomb_filter = "gubbins"

		remove_recomb = RecombinationFilter(
			final_results_directory = final_results_directory,
			threads = threads)

		remove_recomb.run_gubbins(final_results_directory, threads)
		
	else:

		recomb_filter = "none"

	create_snpmatrix = CoresnpMatrix(
		final_results_directory = final_results_directory,
		recomb_filter = recomb_filter)

	create_snpmatrix.create_core_snp_matrix(final_results_directory, recomb_filter)

	create_snpmatrix.create_snp_fasta(final_results_directory)


def main():

	parser = argparse.ArgumentParser(usage = "snpbac -i </path/to/list_of_sample_file_paths.txt> -o </path/to/output/directory/> -r </path/to/reference.fasta> [-other options]")

	parser.add_argument("-i", "--input", help = "Path to list of sample file paths, one sample file path per line; single-end reads get their own line, while paired end reads should be on the same line, separated by a comma", nargs = 1, required = True)
	
	parser.add_argument("-o", "--output", help = "Path to desired output directory", nargs = 1, required = True)
	
	parser.add_argument("-r", "--reference", help = "Path to reference genome in fasta format", nargs = 1, required = True)

	parser.add_argument("--aligner", help = "Optional argument; bwa or bowtie2; align reads to reference using bwa mem or bowtie2; default = bwa", nargs = "?", default = "bwa")

	parser.add_argument("--variant_caller", help = "Optional argument; samtools or freebayes; call variants using samtools/bcftools or freebayes; default = samtools", nargs = "?", default = "samtools")

	parser.add_argument("--quality", help = "Optional argument; integer; minimum quality threshold of SNPs and indels to retain when filtering variants with vcftools; default = 20", nargs = "?", default = 20)
	
	parser.add_argument("--remove_recombination", help = "Optional argument; True or False; remove SNPs found in regions of recombination identified using Gubbins; default = True", nargs = "?", default = "True")

	parser.add_argument("-t", "--threads", help = "Optional argument; integer; number of threads; default = 1", nargs = "?", default = 1)

	parser.add_argument('--version', action="version", version='%(prog)s 1.0.0', help="Print version")

	args = parser.parse_args()
	
	run_pipeline(args)

if __name__ == "__main__":
	main()
	
